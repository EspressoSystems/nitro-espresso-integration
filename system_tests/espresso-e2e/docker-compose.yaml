version: '3.9'
services:
  deploy-contracts:
    image: ghcr.io/espressosystems/espresso-sequencer/deploy:arbitrum-integrationmusl
    environment:
      - ESPRESSO_SEQUENCER_ORCHESTRATOR_URL
      - ESPRESSO_SEQUENCER_L1_PROVIDER
      - ESPRESSO_SEQUENCER_ETH_MNEMONIC=$ESPRESSO_COMMITMENT_ETH_MNEMONIC
      - ESPRESSO_DEPLOYER_ACCOUNT_INDEX
      - RUST_LOG
      - RUST_LOG_FORMAT
      - ASYNC_STD_THREAD_COUNT
    depends_on:
      orchestrator:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"

  orchestrator:
    image: ghcr.io/espressosystems/espresso-sequencer/orchestrator:arbitrum-integrationmusl
    ports:
      - "$ESPRESSO_ORCHESTRATOR_PORT:$ESPRESSO_ORCHESTRATOR_PORT"
    environment:
      - ESPRESSO_ORCHESTRATOR_PORT
      - ESPRESSO_ORCHESTRATOR_NUM_NODES
      - ESPRESSO_ORCHESTRATOR_START_DELAY
      - ESPRESSO_ORCHESTRATOR_NEXT_VIEW_TIMEOUT
      - ESPRESSO_ORCHESTRATOR_MIN_TRANSACTIONS
      - ESPRESSO_ORCHESTRATOR_MIN_PROPOSE_TIME
      - ESPRESSO_ORCHESTRATOR_MAX_PROPOSE_TIME
      - RUST_LOG
      - RUST_LOG_FORMAT

  # We use KeyDB (a Redis variant) to maintain consistency between
  # different parts of the CDN
  keydb:
    image: docker.io/eqalpha/keydb:latest
    command: ["--requirepass", "changemeplease!!"]
    healthcheck:
      # Attempt to PING the database
      test: keydb-cli --pass changemeplease!! --raw incr PING
      interval: 5s
      timeout: 4s
      retries: 20

  # The CDN system's main entry point; where users contact first.
  marshal-0:
    environment:
      - RUST_LOG
      - ESPRESSO_CDN_SERVER_METRICS_PORT
    image: ghcr.io/espressosystems/espresso-sequencer/cdn-marshal:main
    command:
      - cdn-marshal
      - -d
      - redis://:changemeplease!!@keydb:6379
      - -b
      - $ESPRESSO_CDN_SERVER_PORT
      - -m
      - 0.0.0.0:$ESPRESSO_CDN_SERVER_METRICS_PORT
    depends_on:
      keydb:
        condition: service_healthy

  # A broker is the main message-routing unit of the CDN
  broker-0:
    environment:
      - RUST_LOG
      - ESPRESSO_CDN_SERVER_METRICS_PORT
    image: ghcr.io/espressosystems/espresso-sequencer/cdn-broker:main
    command:
    - cdn-broker
    - -d
    - redis://:changemeplease!!@keydb:6379
    - --public-advertise-endpoint
    - broker-0:1738
    - --private-advertise-endpoint
    - broker-0:1739
    - -m
    - 0.0.0.0:$ESPRESSO_CDN_SERVER_METRICS_PORT
    depends_on:
      keydb:
        condition: service_healthy

  # A broker is the main message-routing unit of the CDN
  broker-1:
    environment:
      - RUST_LOG
      - ESPRESSO_CDN_SERVER_METRICS_PORT
    image: ghcr.io/espressosystems/espresso-sequencer/cdn-broker:main
    command:
    - cdn-broker
    - -d
    - redis://:changemeplease!!@keydb:6379
    - --public-advertise-endpoint
    - broker-1:1738
    - --private-advertise-endpoint
    - broker-1:1739
    - -m
    - 0.0.0.0:$ESPRESSO_CDN_SERVER_METRICS_PORT
    depends_on:
      keydb:
        condition: service_healthy

  espresso-sequencer0:
    image: ghcr.io/espressosystems/espresso-sequencer/sequencer:arbitrum-integrationmusl
    ports:
      - "$ESPRESSO_SEQUENCER_API_PORT:$ESPRESSO_SEQUENCER_API_PORT"
    # Run the API server (with options taken from the environment) and the optional submission API
    command: sequencer -- http -- query -- submit -- status
    environment:
      - ESPRESSO_SEQUENCER_ORCHESTRATOR_URL
      - ESPRESSO_SEQUENCER_CDN_ENDPOINT
      - ESPRESSO_SEQUENCER_API_PORT
      - ESPRESSO_SEQUENCER_HOTSHOT_EVENT_STREAMING_API_PORT
      - ESPRESSO_SEQUENCER_STORAGE_PATH
      - ESPRESSO_SEQUENCER_L1_PROVIDER
      - ESPRESSO_STATE_RELAY_SERVER_URL
      - ESPRESSO_SEQUENCER_PRIVATE_STAKING_KEY=$ESPRESSO_DEMO_SEQUENCER_STAKING_PRIVATE_KEY_0
      - ESPRESSO_SEQUENCER_PRIVATE_STATE_KEY=$ESPRESSO_DEMO_SEQUENCER_STATE_PRIVATE_KEY_0
      - ESPRESSO_SEQUENCER_LIBP2P_BIND_ADDRESS=0.0.0.0:$ESPRESSO_DEMO_SEQUENCER_LIBP2P_PORT_0
      - ESPRESSO_SEQUENCER_LIBP2P_ADVERTISE_ADDRESS=espresso-sequencer0:$ESPRESSO_DEMO_SEQUENCER_LIBP2P_PORT_0
      - ESPRESSO_SEQUENCER_ETH_MNEMONIC
      - ESPRESSO_SEQUENCER_ETH_ACCOUNT_INDEX
      - ESPRESSO_SEQUENCER_PREFUNDED_BUILDER_ACCOUNTS
      - ESPRESSO_SEQUENCER_STATE_PEERS=http://espresso-sequencer1:$ESPRESSO_SEQUENCER_API_PORT
      - RUST_LOG
      - RUST_LOG_FORMAT
    depends_on:
      orchestrator:
        condition: service_healthy
      sequencer-db:
        condition: service_healthy
      state-relay-server:
        condition: service_healthy
      broker-0:
        condition: service_healthy
      broker-1:
        condition: service_healthy
      marshal-0:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"

  espresso-sequencer1:
    image: ghcr.io/espressosystems/espresso-sequencer/sequencer:arbitrum-integrationmusl
    ports:
      - "$ESPRESSO_SEQUENCER1_API_PORT:$ESPRESSO_SEQUENCER_API_PORT"
    # Run the API server (with options taken from the environment)
    command: sequencer -- http
    environment:
      - ESPRESSO_SEQUENCER_ORCHESTRATOR_URL
      - ESPRESSO_SEQUENCER_CDN_ENDPOINT
      - ESPRESSO_SEQUENCER_API_PORT
      - ESPRESSO_SEQUENCER_HOTSHOT_EVENT_STREAMING_API_PORT
      - ESPRESSO_SEQUENCER_STORAGE_PATH
      - ESPRESSO_SEQUENCER_L1_PROVIDER
      - ESPRESSO_STATE_RELAY_SERVER_URL
      - ESPRESSO_SEQUENCER_PRIVATE_STAKING_KEY=$ESPRESSO_DEMO_SEQUENCER_STAKING_PRIVATE_KEY_1
      - ESPRESSO_SEQUENCER_PRIVATE_STATE_KEY=$ESPRESSO_DEMO_SEQUENCER_STATE_PRIVATE_KEY_1
      - ESPRESSO_SEQUENCER_LIBP2P_BIND_ADDRESS=0.0.0.0:$ESPRESSO_DEMO_SEQUENCER_LIBP2P_PORT_1
      - ESPRESSO_SEQUENCER_LIBP2P_ADVERTISE_ADDRESS=espresso-sequencer1:$ESPRESSO_DEMO_SEQUENCER_LIBP2P_PORT_1
      - ESPRESSO_SEQUENCER_ETH_MNEMONIC
      - ESPRESSO_SEQUENCER_ETH_ACCOUNT_INDEX
      - ESPRESSO_SEQUENCER_PREFUNDED_BUILDER_ACCOUNTS
      - ESPRESSO_SEQUENCER_STATE_PEERS=http://espresso-sequencer0:$ESPRESSO_SEQUENCER_API_PORT
      - RUST_LOG
      - RUST_LOG_FORMAT
    depends_on:
      orchestrator:
        condition: service_healthy
      sequencer-db:
        condition: service_healthy
      state-relay-server:
        condition: service_healthy
      broker-0:
        condition: service_healthy
      broker-1:
        condition: service_healthy
      marshal-0:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"

  commitment-task:
    image: ghcr.io/espressosystems/espresso-sequencer/commitment-task:arbitrum-integrationmusl
    ports:
      - "$ESPRESSO_COMMITMENT_TASK_PORT:$ESPRESSO_COMMITMENT_TASK_PORT"
    environment:
      - ESPRESSO_SEQUENCER_ETH_MNEMONIC=$ESPRESSO_COMMITMENT_ETH_MNEMONIC
      - ESPRESSO_SEQUENCER_HOTSHOT_ACCOUNT_INDEX
      - ESPRESSO_COMMITMENT_TASK_PORT
      - ESPRESSO_SEQUENCER_URL
      - ESPRESSO_SEQUENCER_L1_PROVIDER
      - ESPRESSO_SEQUENCER_HOTSHOT_ADDRESS
      - RUST_LOG
      - RUST_LOG_FORMAT
    depends_on:
      espresso-sequencer0:
        condition: service_healthy
      deploy-contracts:
        condition: service_completed_successfully

    extra_hosts:
      - "host.docker.internal:host-gateway"

  state-relay-server:
    image: ghcr.io/espressosystems/espresso-sequencer/state-relay-server:arbitrum-integrationmusl
    ports:
      - "$ESPRESSO_STATE_RELAY_SERVER_PORT:$ESPRESSO_STATE_RELAY_SERVER_PORT"
    environment:
      - ESPRESSO_STATE_RELAY_SERVER_PORT
      - ESPRESSO_STATE_SIGNATURE_WEIGHT_THRESHOLD
      - RUST_LOG
      - RUST_LOG_FORMAT

  sequencer-db:
    image: postgres
    user: postgres
    ports:
      - "$ESPRESSO_SEQUENCER_DB_PORT:5432"
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=root
    healthcheck:
      # Postgres can be falsely "ready" once before running init scripts.
      # See https://github.com/docker-library/postgres/issues/146 for discussion.
      test: "pg_isready && sleep 1 && pg_isready"
      interval: 5s
      timeout: 4s
      retries: 20
