// Copyright 2022, Offchain Labs, Inc.
// For license information, see https://github.com/nitro/blob/master/LICENSE

use crate::{gostack::GoStack, machine::WasmEnvMut};
use ark_bls12_381::Bls12_381;
use ark_serialize::CanonicalDeserialize;
use jf_primitives::pcs::prelude::UnivariateUniversalParams;
use jf_primitives::{
    pcs::{checked_fft_size, prelude::UnivariateKzgPCS, PolynomialCommitmentScheme},
    vid::advz::{payload_prover::LargeRangeProof, Advz},
};

pub fn verify_namespace(mut env: WasmEnvMut, sp: u32) {
    let (sp, _) = GoStack::new(sp, &mut env);
    let namespace = sp.read_u64(0);
    let proof_buf_ptr = sp.read_u64(1);
    let proof_buf_len = sp.read_u64(2);
    let block_comm_buf_ptr = sp.read_u64(4);
    let block_comm_buf_len = sp.read_u64(5);
    let txs_buf_ptr = sp.read_u64(7);
    let txs_buf_len = sp.read_u64(8);

    let proof_bytes = sp.read_slice(proof_buf_ptr, proof_buf_len);
    let block_comm_bytes = sp.read_slice(block_comm_buf_ptr, block_comm_buf_ptr);
    let txs_bytes = sp.read_slice(txs_buf_ptr, txs_buf_len);

    let advz: Advz<Bls12_381, sha2::Sha256>;
    let (payload_chunk_size, num_storage_nodes) = (8, 10);
    let srs_bytes = [
        9, 0, 0, 0, 0, 0, 0, 0, 174, 40, 12, 59, 118, 252, 115, 21, 132, 84, 3, 147, 164, 106, 107,
        5, 59, 99, 162, 246, 249, 21, 195, 121, 230, 167, 129, 62, 20, 255, 151, 214, 248, 202, 38,
        203, 214, 90, 225, 82, 244, 127, 56, 169, 65, 92, 134, 13, 129, 230, 113, 235, 219, 70, 61,
        187, 113, 134, 216, 21, 0, 230, 216, 210, 132, 5, 125, 155, 16, 96, 181, 101, 159, 179,
        201, 202, 252, 21, 110, 41, 214, 5, 55, 42, 17, 16, 126, 106, 154, 208, 68, 75, 55, 196,
        205, 129, 135, 182, 211, 6, 5, 219, 148, 12, 243, 180, 103, 248, 34, 170, 170, 27, 181, 40,
        44, 252, 189, 8, 48, 20, 212, 107, 180, 117, 23, 85, 53, 216, 106, 91, 182, 10, 88, 19,
        177, 55, 42, 201, 182, 158, 90, 125, 186, 131, 165, 48, 198, 200, 116, 37, 119, 165, 142,
        48, 171, 149, 38, 153, 182, 232, 28, 188, 113, 104, 182, 64, 105, 217, 181, 142, 25, 246,
        66, 46, 47, 144, 210, 4, 140, 74, 253, 13, 59, 42, 98, 65, 236, 225, 195, 41, 156, 24, 172,
        232, 195, 214, 171, 105, 117, 138, 136, 186, 232, 169, 67, 236, 21, 102, 54, 93, 226, 82,
        194, 82, 98, 91, 98, 86, 113, 24, 169, 250, 18, 99, 236, 192, 220, 216, 220, 232, 20, 238,
        41, 51, 73, 219, 235, 1, 3, 64, 145, 204, 57, 91, 195, 177, 141, 161, 247, 39, 136, 31,
        149, 200, 222, 177, 199, 192, 227, 100, 107, 94, 214, 32, 163, 233, 201, 160, 31, 165, 136,
        236, 11, 141, 50, 170, 148, 91, 83, 49, 227, 129, 84, 16, 69, 23, 244, 27, 175, 47, 60, 95,
        74, 76, 98, 65, 104, 123, 50, 18, 54, 119, 146, 47, 206, 206, 210, 141, 138, 68, 84, 190,
        237, 232, 62, 121, 34, 207, 235, 195, 176, 244, 186, 75, 182, 3, 192, 254, 56, 94, 195,
        188, 156, 192, 195, 24, 134, 1, 78, 141, 171, 29, 151, 193, 239, 131, 86, 117, 53, 220,
        204, 240, 133, 126, 71, 138, 205, 23, 235, 72, 183, 213, 112, 51, 187, 218, 123, 90, 154,
        197, 101, 157, 179, 246, 104, 101, 104, 90, 81, 41, 59, 84, 65, 211, 184, 201, 98, 163,
        242, 196, 202, 131, 255, 17, 254, 74, 176, 164, 254, 0, 78, 53, 79, 95, 179, 93, 127, 216,
        189, 41, 42, 235, 30, 88, 12, 14, 3, 160, 180, 53, 175, 71, 129, 237, 113, 65, 192, 64,
        137, 254, 157, 22, 160, 10, 250, 70, 34, 39, 191, 88, 62, 112, 22, 194, 149, 187, 116, 3,
        36, 174, 65, 137, 54, 193, 210, 23, 40, 59, 105, 143, 21, 244, 194, 139, 31, 141, 17, 81,
        202, 227, 47, 103, 167, 251, 75, 139, 85, 138, 118, 212, 19, 215, 51, 181, 52, 216, 101,
        130, 237, 252, 43, 26, 235, 27, 128, 226, 227, 233, 34, 159, 201, 124, 22, 90, 105, 135,
        202, 42, 33, 92, 86, 170, 51, 144, 55, 2, 20, 75, 230, 146, 201, 162, 238, 45, 15, 95, 130,
        174, 153, 81, 219, 74, 193, 124, 147, 156, 121, 127, 180, 199, 84, 202, 102, 206, 130, 50,
        169, 201, 172, 239, 92, 224, 13, 153, 66, 183, 69, 190, 49, 128, 38, 153, 45, 108, 46, 16,
        214, 168, 12, 191, 81, 10, 229, 105, 1, 157, 10, 186, 215, 37, 240, 203, 189, 190, 220,
        196, 20, 240, 91, 179, 57, 16, 111, 101, 183, 58, 222, 80, 57, 33, 13, 154, 195, 200, 243,
        93, 160, 156, 216, 128, 61, 176, 103, 194, 224, 194, 52, 33, 208, 47, 198, 160, 24, 137, 2,
        0, 0, 0, 0, 0, 0, 0, 160, 10, 250, 70, 34, 39, 191, 88, 62, 112, 22, 194, 149, 187, 116, 3,
        36, 174, 65, 137, 54, 193, 210, 23, 40, 59, 105, 143, 21, 244, 194, 139, 31, 141, 17, 81,
        202, 227, 47, 103, 167, 251, 75, 139, 85, 138, 118, 212, 19, 215, 51, 181, 52, 216, 101,
        130, 237, 252, 43, 26, 235, 27, 128, 226, 227, 233, 34, 159, 201, 124, 22, 90, 105, 135,
        202, 42, 33, 92, 86, 170, 51, 144, 55, 2, 20, 75, 230, 146, 201, 162, 238, 45, 15, 95, 130,
        174, 153, 81, 219, 74, 193, 124, 147, 156, 121, 127, 180, 199, 84, 202, 102, 206, 130, 50,
        169, 201, 172, 239, 92, 224, 13, 153, 66, 183, 69, 190, 49, 128, 38, 153, 45, 108, 46, 16,
        214, 168, 12, 191, 81, 10, 229, 105, 1, 157, 10, 186, 215, 37, 240, 203, 189, 190, 220,
        196, 20, 240, 91, 179, 57, 16, 111, 101, 183, 58, 222, 80, 57, 33, 13, 154, 195, 200, 243,
        93, 160, 156, 216, 128, 61, 176, 103, 194, 224, 194, 52, 33, 208, 47, 198, 160, 24, 137,
    ];
    let srs_vec = srs_bytes.to_vec();
    let srs = UnivariateUniversalParams::<Bls12_381>::deserialize_compressed(&*srs_vec).unwrap();
    advz = Advz::new(payload_chunk_size, num_storage_nodes, srs).unwrap();
}
